import asyncio
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message
from sqlalchemy.ext.asyncio import AsyncSession
from config import *
from bot import bot
from user.user import UserDAO
from .kb import *
from .schemas import *
from db.models.models.manager import *
from utils.utils import *
from .form import *

admin_router = Router()

@admin_router.callback_query(F.data == "admin_panel", F.from_user.id.in_(ADMINS))
async def start_admin(call: CallbackQuery):
    await call.answer('–î–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–µ—à–µ–Ω!')
    await call.message.edit_text(
        text="–í–∞–º —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–æ—Å—Ç—É–ø –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.",
        reply_markup=admin_kb()
    )

@admin_router.callback_query(F.data == 'statistic', F.from_user.id.in_(ADMINS))
async def admin_statistic(call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer('–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...')
    await call.answer('üìä –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...')

    stats = await UserDAO.get_statistics(session=session_without_commit)
    total_summ = await PurchaseDao.get_full_summ(session=session_without_commit)
    stats_message = (
        "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üÜï –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {stats['new_today']}\n"
        f"üìÖ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['new_week']}\n"
        f"üìÜ –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {stats['new_month']}\n\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤: {total_summ} —Ä—É–±.\n\n"
        "üïí –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–æ–º–µ–Ω—Ç."
    )
    await call.message.edit_text(
        text=stats_message,
        reply_markup=stat_kb()
    )


@admin_router.callback_query(F.data == "users", F.from_user.id.in_(ADMINS))
async def start_admin(call: CallbackQuery, session_without_commit: AsyncSession):
    users = await UserDAO.find_all(session=session_without_commit)
    user_data = await UserDAO.get_statistics(session=session_without_commit)
    text = (
        "üë• –ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –±–∞–∑–µ:\n\n"
        "‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ–±—ã –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å.\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_data['total_users']}\n"
    )
    for user in users:
        purchased_tar = await UserDAO.get_purchased_products(session=session_without_commit, telegram_id=user.telegram_id)
        text += f'üë§ <code>{user.telegram_id} - @{user.username}</code>, –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞—Ç–µ–∂ - {"<b>–¥–∞</b>" if purchased_tar[0].active else "<b>–Ω–µ—Ç</b>"}\n'
    await call.message.answer(
        text=text,
        reply_markup=await get_paginated_kb(page=0, session=session_without_commit)
    )

@admin_router.callback_query(F.data.startswith('about-user'), F.from_user.id.in_(ADMINS))
async def admin_process_start_dell(call: CallbackQuery, session_without_commit: AsyncSession):
    user_id = int(call.data.split('_')[-1])
    user = await UserDAO.find_one_or_none(session=session_without_commit, filters=UserBaseInDB(telegram_id=user_id))
    purchs = await UserDAO.get_purchased_products(session=session_without_commit, user_id=user.id)
    text = (
        f" üë§@{user.username}: { "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –µ—Å—Ç—å." if not user.active else "" }\n\n"
        f"–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:\n\n"
    )
    for i in purchs:
        text += f"üí≥ <i>{i.tariff.name}, —Ü–µ–Ω–∞ - {i.price}</i>, –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞—Ç–µ–∂ - {"<b>–¥–∞</b>" if i.active else "<b>–Ω–µ—Ç</b>"}, —Å–¥–µ–ª–∞–Ω - <i>{how_much_ago(i.created_at)}</i>\n"
    await call.message.edit_text(text=text, reply_markup=await admin_kb_user(user_id=user_id, session=session_without_commit))


@admin_router.callback_query(F.data.startswith('ogr-user'), F.from_user.id.in_(ADMINS))
async def admin_process_start_dell(call: CallbackQuery, session_with_commit: AsyncSession):
    user_id = int(call.data.split('_')[-1])
    user_data = await UserDAO.find_one_or_none(session=session_with_commit, filters=UserBaseInDB(telegram_id=user_id))
    user = None
    if user_data.active:
        values = User_upd_active(
            active = False
        )
        user = await UserDAO.update(session=session_with_commit, values=values, record_id=user_id)
    else:
        values = User_upd_active(
            active = True
        )
        user = await UserDAO.update(session=session_with_commit, values=values, record_id=user_id)
    await call.answer(f"–í—ã –æ–≥—Ä–∞–Ω–∏—á–∏–ª–∏, {user.username} –≤ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –±–æ—Ç–∞.", show_alert=True)
    purchs = await UserDAO.get_purchased_products(session=session_with_commit, user_id=user.id)
    print(user)
    text = (
        f"üë§ {user.username}: { "–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –µ—Å—Ç—å." if not user.active else "" }\n\n"
        f"–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:\n\n"
    )
    for i in purchs:
        text += f"üí≥ <i>{i.tariff.name}, —Ü–µ–Ω–∞ - {i.price}</i>, –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞—Ç–µ–∂ - {"<b>–¥–∞</b>" if i.active else "<b>–Ω–µ—Ç</b>"}, —Å–¥–µ–ª–∞–Ω - <i>{how_much_ago(i.created_at)}</i>\n"
    await call.message.edit_text(text=text, reply_markup=await admin_kb_user(user_id=user_id, session=session_with_commit))


@admin_router.callback_query(Pagination.filter())
async def products_pagination_callback(call: CallbackQuery, callback_data: dict,  session_without_commit: AsyncSession):
    page =  callback_data.page
    print(page)
    await call.message.edit_reply_markup(  
    reply_markup=await get_paginated_kb(page=page, session=session_without_commit)  
)

@admin_router.callback_query(F.data == "cancel", F.from_user.id.in_(ADMINS))
async def admin_process_cancel(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.answer('–û—Ç–º–µ–Ω–∞ —Å—Ü–µ–Ω–∞—Ä–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è')
    await call.message.delete()
    await call.message.answer(
        text="–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
        reply_markup=admin_kb_back()
    )

@admin_router.callback_query(F.data == 'process_products', F.from_user.id.in_(ADMINS))
async def admin_process_products(call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer('–†–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
    all_tariff_count = await TarrifDao.count(session=session_without_commit)
    await call.message.edit_text(
        text=f"üìÇ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {all_tariff_count} —Ç–∞—Ä–∏—Ñ–æ–≤. —á—Ç–æ –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å –Ω–∏–º–∏?",
        reply_markup=product_management_kb()
    ) 


@admin_router.callback_query(F.data == 'process_category', F.from_user.id.in_(ADMINS))
async def admin_process_cats(call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer('–†–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
    all_types_count = await TypeiftariffsDAO.count(session=session_without_commit)
    await call.message.edit_text(
        text=f"üìÇ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {all_types_count} —Ç–∏–ø–æ–≤ —Ç–∞—Ä–∏—Ñ—Ñ–æ–≤. —á—Ç–æ –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å –Ω–∏–º–∏?",
        reply_markup=category_management_kb()
    )

@admin_router.callback_query(F.data == 'delete_cat', F.from_user.id.in_(ADMINS))
async def admin_process_start_dell(call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer('–†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è')
    all_types = await TypeiftariffsDAO.find_all(session=session_without_commit)

    await call.message.edit_text(
        text=f"üìÇ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {len(all_types)} —Ç–∏–ø–æ–≤ —Ç–∞—Ä–∏—Ñ–æ–≤. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
    )
    for product_data in all_cats:
        product_text = (f'<b> —Ç–∏–ø —Ç–∞—Ä–∏—Ñ–∞:</b> <b>{product_data.category_name}</b>\n')
        await call.message.answer(text=product_text, reply_markup=dell_cat_kb(product_data.id))

@admin_router.callback_query(F.data.startswith('dell-cat'), F.from_user.id.in_(ADMINS))
async def admin_process_start_dell(call: CallbackQuery, session_with_commit: AsyncSession):
    product_id = int(call.data.split('_')[-1])
    await TypeiftariffsDAO.delete(session=session_with_commit, filters=ProductCategoryIDModel(id=product_id))
    await call.answer(f"–¢–∏–ø —Ç–∞—Ä–∏—Ñ–∞ —Å ID {product_id} —É–¥–∞–ª–µ–Ω!", show_alert=True)
    await call.message.delete()

@admin_router.callback_query(F.data == 'add_cat', F.from_user.id.in_(ADMINS))
async def admin_process_add_type_tariff(call: CallbackQuery, state: FSMContext):
    await call.answer('–ó–∞–ø—É—â–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ç–∞—Ä–∏—Ñ–∞.')
    await call.message.delete()
    msg = await call.message.answer(text="–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç–∏–ø–∞ —Ç–∞—Ä–∏—Ñ–∞: ", reply_markup=cancel_kb_inline())
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(Addtypeoftariff.type_tarif_name)

@admin_router.callback_query(F.text, F.from_user.id.in_(ADMINS), Addtypeoftariff.type_tarif_name)
async def admin_process_add_how_much_days(call: CallbackQuery, state: FSMContext):
    await state.update_data(type_tarif_name=message.text)
    await call.message.delete()
    msg = await call.message.answer(text="–£–∫–∞–∂–∏—Ç–µ –≤ –¥–Ω—è—Ö(—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º), —Ç–æ —Å–∫–æ–ª—å–∫–æ –±—É–¥—É—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã —Ç–∞—Ä–∏—Ñ—ã, –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ —Ç–∞—Ä–∏—Ñ–æ–≤: ", reply_markup=cancel_kb_inline())
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(Addtypeoftariff.how_much_days)


@admin_router.message(F.text, F.from_user.id.in_(ADMINS), Addtypeoftariff.how_much_days)
async def admin_process_name(message: Message, state: FSMContext):
    try:
        days = int(message.text)
        await state.update_data(how_much_ago=days)
        cat_data = await state.get_data()
        cat_text = (
            f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å–µ –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:\n\n'
            f'<b>–¢–∏–ø —Ç–∞—Ä–∏—Ñ–∞:</b> <b>{cat_data["category_name"]}</b>\n'
            f'–ó–∞–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤ –¥–Ω—è—Ö, –Ω–∞—Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ - {days} –¥.'
            )
        await process_dell_text_msg(message, state)
        msg = await message.answer(text=cat_text, reply_markup=admin_confirm_kb())
        await state.update_data(last_msg_id=msg.message_id)
        await state.set_state(Addtypeoftariff.confirm_add)
    except ValueError:
        await message.answer(text="–û—à–∏–±–∫–∞! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ü–µ–Ω—ã.")
        return

@admin_router.callback_query(F.data == "confirm_add", F.from_user.id.in_(ADMINS), Addtypeoftariff.confirm_add)
async def admin_process_confirm_add(call: CallbackQuery, state: FSMContext, session_with_commit: AsyncSession):
    type_tariff_data = await state.get_data()
    await bot.delete_message(chat_id=call.from_user.id, message_id=type_tariff_data["last_msg_id"])
    del type_tariff_data["last_msg_id"]
    await TypeiftariffsDAO.add(session=session_with_commit, values=CategoryModel(**type_tariff_data))
    await call.message.answer(text="üÜó –¢–∏–ø —Ç–∞—Ä–∏—Ñ–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!", reply_markup=admin_kb())


@admin_router.callback_query(F.data == 'add_product', F.from_user.id.in_(ADMINS))
async def admin_process_add_tariff(call: CallbackQuery, state: FSMContext):
    await call.answer('–ó–∞–ø—É—â–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞.')
    await call.message.delete()
    msg = await call.message.answer(text="–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞: ", reply_markup=cancel_kb_inline())
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(Addtariff.name)


@admin_router.message(F.text, F.from_user.id.in_(ADMINS), Addtariff.name)
async def admin_process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await process_dell_text_msg(message, state)
    msg = await message.answer(text="–¢–µ–ø–µ—Ä—å –¥–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ—É: ", reply_markup=cancel_kb_inline())
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(Addtariff.description)


@admin_router.message(F.text, F.from_user.id.in_(ADMINS), Addtariff.description)
async def admin_process_description(message: Message, state: FSMContext, session_without_commit: AsyncSession):
    await state.update_data(description=message.html_text)
    await process_dell_text_msg(message, state)
    cat_type_tariffs_data = await TypeiftariffsDAO.find_all(session=session_without_commit)
    msg = await message.answer(text="–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–∞—Ä–∏—Ñ–∞: ", reply_markup=catalog_admin_kb(cat_type_tariffs_data))
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(Addtariff.type_of_tarrifs_id)


@admin_router.callback_query(F.data.startswith("add_category_"),
                             F.from_user.id.in_(ADMINS),
                             Addtariff.type_of_tarrifs_id)
async def admin_process_type_tariff(call: CallbackQuery, state: FSMContext):
    type_of_tarrifs_id = int(call.data.split("_")[-1])
    await state.update_data(type_of_tarrifs_id=type_of_tarrifs_id)
    await call.answer('–¢–∏–ø —Ç–∞—Ä–∏—Ñ–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω.')
    msg = await call.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–∞—Ä–∏—Ñ–∞ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 10", reply_markup=cancel_kb_inline())
    await state.update_data(last_msg_id=msg.message_id)
    await state.set_state(Addtariff.price)


@admin_router.message(F.text, F.from_user.id.in_(ADMINS), Addtariff.price)
async def admin_before_add(message: Message, state: FSMContext, session_without_commit: AsyncSession):
    try:
        price = int(message.text)
        await state.update_data(price=price)
        tariff_data = await state.get_data()
        type_of_tariff_info = await TypeiftariffsDAO.find_one_or_none_by_id(session=session_without_commit,
                                                                data_id=tariff_data.get("type_of_tarrifs_id"))

        tariff_add_text = (f'üõí –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤—Å–µ –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ:\n\n'
                        f'üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> <b>{tariff_data["name"]}</b>\n'
                        f'üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n<b>{tariff_data["description"]}</b>\n\n'
                        f'üîπ <b>C—Ä–æ–∫ —Ç–∞—Ä–∏—Ñ–∞:</b>\n\n<b>{type_of_tariff_info.how_much_days} –¥.</b>\n\n'
                        f'üîπ <b>–¶–µ–Ω–∞:</b> <b>{ttariff_data["price"]} ‚ÇΩ</b>\n'
                        f'üîπ <b>–¢–∏–ø —Ç–∞—Ä–∏—Ñ–∞:</b> <b>{type_of_tariff_info.type_tarif_name} (ID: {type_of_tariff_info.id})</b>\n\n'
        )
        await process_dell_text_msg(message, state)
        msg = await message.answer(text=product_text, reply_markup=admin_confirm_kb())
        await state.update_data(last_msg_id=msg.message_id)
        await state.set_state(Addtariff.confirm_add)
    except ValueError:
        await message.answer(text="–û—à–∏–±–∫–∞! –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ü–µ–Ω—ã.")
        return

@admin_router.callback_query(F.data == "confirm_add", F.from_user.id.in_(ADMINS), Addtariff.confirm_add)
async def admin_process_confirm_add(call: CallbackQuery, state: FSMContext, session_with_commit: AsyncSession):
    tariff_data = await state.get_data()
    await bot.delete_message(chat_id=call.from_user.id, message_id=tariff_data["last_msg_id"])
    del product_data["last_msg_id"]
    await TarrifDao.add(session=session_with_commit, values=ProductModel(**tariff_data))
    await state.clear()
    await call.message.answer(text="üÜó –¢–∞—Ä–∏—Ñ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!", reply_markup=admin_kb())

@admin_router.callback_query(F.data == 'delete_product', F.from_user.id.in_(ADMINS))
async def admin_process_start_dell(call: CallbackQuery, session_without_commit: AsyncSession):
    await call.answer('–†–µ–∂–∏–º —É–¥–∞–ª–µ–Ω–∏—è')
    all_tariffs = await TarrifDao.find_all(session=session_without_commit)

    await call.message.edit_text(
        text=f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö {len(all_tariffs)} —Ç–∞—Ä–∏—Ñ–æ–≤. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
    )

    for product_data in all_tariffs:

        product_text = (f'üõí –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:\n\n'
                        f'üîπ <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:</b> <b>{product_data.name}</b>\n'
                        f'üîπ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n\n<b>{product_data.description}</b>\n\n'
                        f'üîπ <b>–¶–µ–Ω–∞:</b> <b>{product_data.price} ‚ÇΩ</b>\n')

        await call.message.answer(text=product_text, reply_markup=dell_product_kb(product_data.id))

@admin_router.callback_query(F.data.startswith('dell-prod'), F.from_user.id.in_(ADMINS))
async def admin_process_start_dell(call: CallbackQuery, session_with_commit: AsyncSession):
    product_id = int(call.data.split('_')[-1])
    await TarrifDao.delete(session=session_with_commit, filters=ProductCategoryIDModel(id=product_id))
    await call.answer(f"üÜó–¢–∞—Ä–∏—Ñ —Å ID {product_id} —É–¥–∞–ª–µ–Ω!", show_alert=True)
    await call.message.delete()
